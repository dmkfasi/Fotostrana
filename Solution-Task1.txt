Задача 1

Вам поступила задача:
Необходимо создать общую ленту новостей для пользователей с возможностью оценки постов в ленте.
Лента должна иметь фильтр по категориям. Любой пользователь может поставить "лайк" или отменить его. Необходимо предусмотреть возможность просмотра списка всех оценивших пост пользователей. Ограничение на размер хранения контента одного поста - 243 байта.
Предложите структуру базы данных MySQL, позволяющую реализовать данную задачу. Напишите базовый модуль, реализующий функции вывода новостей, добавление нового поста в ленту, установку и отмену "лайка" на новости.

Комментарии:
Не нужно писать на  РНР, будет достаточно написать структуру базы и запросы к ней, которые будут решать поставленные задачи:
1. запрос на постановку лайка от юзера к новости;
2. запрос на отмену лайка;
3. выборка пользователей, оценивших новость, желательно учесть что их могут быть тысячи и сделать возможность постраничного вывода;
4. запрос для вывода ленты новостей;
5. запрос на добавление поста в ленту.

************************************************************

/**
* Описание таблиц для структуры объектов поставленной задачи
**/

/* Post Topic List */
CREATE TABLE `topics` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` char(16) NOT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `title` (`title`)
) ENGINE=InnoDB;

/* User List */
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` char(16) NOT NULL,
  `email` char(32) NOT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `email` (`email`)
) ENGINE=InnoDB;

/* Posts Feed Table */
CREATE TABLE `posts` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` char(32) NOT NULL,
  `content` char(243) NOT NULL,
  `topic_id` int(10) unsigned NOT NULL COMMENT 'Тема поста',
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `posts_topic_id_foreign` (`topic_id`),
  KEY `posts_updated_at` (`updated_at`),
  CONSTRAINT `posts_topic_id_foreign` FOREIGN KEY (`topic_id`) REFERENCES `topics` (`id`)
) ENGINE=InnoDB;

/* Post Likes Accumulator Table  */
CREATE TABLE `post_likes` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `post_likes_post_id_foreign` (`post_id`),
  KEY `post_likes_user_id_foreign` (`user_id`),
  CONSTRAINT `post_likes_post_id_foreign` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`),
  CONSTRAINT `post_likes_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB;

/**
* Примеры запросов к структуре для выполнения поставленных задач
**/

1. INSERT INTO post_likes (post_id, user_id) VALUES(?, ?);

2. DELETE FROM post_likes WHERE post_id = ? AND user_id = ?;

3. SELECT u.* FROM post_likes pl INNER JOIN users u ON pl.user_id = u.id WHERE pl.post_id = ? LIMIT ?, ?;

4. SELECT p.title, t.title, p.content FROM posts p LEFT JOIN topics t ON p.topic_id = t.id LIMIT ?, ?;

5. INSERT INTO posts (title, content, topic_id) VALUES(?, ?, ?);

